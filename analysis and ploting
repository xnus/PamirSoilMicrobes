# please refer to https://github.com/xnus/OMP-cooccurrence for potential undefined function

library(ShortRead)
library(Biostrings)
library(phyloseq)
library(vegan)
library(ecodist)
library(WGCNA)
library(igraph)
library(ggplot2)
library(multtest)
library(bipartite)
library(reshape2)
library(ape)
library(SpiecEasi)
library(Matrix)
library(phangorn)
library(ggpubr)
library(Hmisc)
library(minpack.lm)
library(stats4)
library(grid)
library(gridExtra)
library(export)
library(ggpubr)


#############
ps.allA <- allA.ps.helt
ps.allB <- allB.ps.helt.flt1
ps.allF <- allF.ps.helt
ps.allB.notflt <- allB.ps.helt

env.allA <- as.data.frame(as(sample_data(ps.allA),"matrix"))
env.allB <- as.data.frame(as(sample_data(ps.allB),"matrix"))
env.allF <- as.data.frame(as(sample_data(ps.allF),"matrix"))

##########################################################################################
############################## map #######################################################
##########################################################################################

library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)

map.info <- comb.samdf[,c("Location","Altitude","Latitude","Longitude")]
map.info <- map.info[!duplicated(map.info),]
map.bbox <- make_bbox(lon = map.info$Longitude, lat = map.info$Latitude, f = .1)
map.sites <- get_map(location = map.bbox, maptype = "stamen_terrain", source = "stadia")
ggmap(map.sites) + 
	geom_point(data = map.info, mapping = aes(x = Longitude, y = Latitude), color = "red", size = 2) +

##########################################################################################
###################### stacked bar plots of top 12 abundant classes ######################
##########################################################################################

# sites arranged due to altitudes
sitesHL <- c("Ulug", "SbsSun", "SbsShade", "Kulma", "Muztagata", "SBDLake", "KongT", "SbsBrdg7", "SbsBrdg8", "BulLake", "Gez1", "Gez2", "AktShade", "AktSun", "OytGlaShade", "OytGlaSun", "OytBrdg1")
sitesLH <- c("OytBrdg1", "OytGlaSun", "OytGlaShade", "AktSun", "AktShade", "Gez2", "Gez1", "BulLake", "SbsBrdg8", "SbsBrdg7", "KongT", "SBDLake", "Muztagata", "Kulma", "SbsShade", "SbsSun", "Ulug")

class.A <- c("Crenarchaeota", "Nitrososphaeria", "Methanobacteria", "Halobacteria", "Methanomicrobia", "Methanosarcinia", "Halobacterota", "Micrarchaeia", "Nanoarchaeia", "Nanosalinia", "Archaea")
class.B <- c("Abditibacteria", "Acidobacteriae", "AT-s3-28", "Blastocatellia", "FFCH5909", "Holophagae", "Subgroup 11", "Subgroup 18", "Subgroup 20", "Subgroup 21", "Subgroup 22", "Subgroup 25", "Subgroup 26", "Subgroup 5", "Thermoanaerobaculia", "Vicinamibacteria", "Acidobacteriota", "Acidimicrobiia", "Actinobacteria", "Coriobacteriia", "MB-A2-108", "Rubrobacteria", "Thermoleophilia", "Actinobacteriota", "Armatimonadia", "Chthonomonadetes", "Fimbriimonadia", "Armatimonadota", "Bacteroidia", "Bacteroidota", "Ignavibacteria", "Kapabacteria", "Kryptonia", "Rhodothermia", "Bdellovibrionia", "Bdellovibrionota", "Oligoflexia", "Campylobacteria", "AD3", "Anaerolineae", "Chloroflexi", "Chloroflexia", "Dehalococcoidia", "Gitt-GS-136", "JG30-KF-CM66", "KD4-96", "Ktedonobacteria", "N9D0", "OLB14", "P2-11E", "SHA-26", "TK10", "Coprothermobacteria", "Cyanobacteriia", "Deferribacteres", "Deinococci", "Babeliae", "Desulfobacteria", "Desulfobacterota", "Desulfobulbia", "Desulfovibrionia", "Desulfuromonadia", "Syntrophia", "Elusimicrobia", "Elusimicrobiota", "Lineage IIa", "Lineage IIb", "Lineage IIc", "Entotheonellia", "Fibrobacteria", "Bacilli", "Clostridia", "Desulfotomaculia", "Firmicutes", "Limnochordia", "Negativicutes", "Symbiobacteriia", "Syntrophomonadia", "Thermoanaerobacteria", "Thermovenabulia", "Fusobacteriia", "GAL15", "AKAU4049", "BD2-11 terrestrial group", "Gemmatimonadetes", "Gemmatimonadota", "Longimicrobia", "PAUC43f marine benthic group", "S0134 terrestrial group", "Hydrogenedentia", "Latescibacterota", "Methylomirabilia", "bacteriap25", "Myxococcia", "Myxococcota", "Polyangia", "NB1-j", "Nitrospiria", "Thermodesulfovibrionia", "ABY1", "Berkelbacteria", "Gracilibacteria", "Microgenomatia", "Parcubacteria", "Patescibacteria", "Saccharimonadia", "PAUC34f", "BD7-11", "OM190", "Phycisphaerae", "Pla3 lineage", "Pla4 lineage", "Planctomycetes", "Planctomycetota", "vadinHA49", "Alphaproteobacteria", "Gammaproteobacteria", "Proteobacteria", "RCP2-54", "Brachyspirae", "MVP-15", "Spirochaetia", "Sumerlaeia", "Synergistia", "Thermotogae", "TX1A-33", "Chlamydiae", "Kiritimatiellae", "Omnitrophia", "Verrucomicrobiota", "Verrucomicrobiae", "WPS-2", "WS2", "Bacteria")
class.F <- c("Aphelidiomycetes", "Archaeorhizomycetes", "Dothideomycetes", "Eurotiomycetes", "Laboulbeniomycetes", "Lecanoromycetes", "Leotiomycetes", "Orbiliomycetes", "Pezizomycetes", "Pezizomycotina_cls_Incertae_sedis", "Saccharomycetes", "Sordariomycetes", "Taphrinomycetes", "Ascomycota", "Agaricomycetes", "Agaricostilbomycetes", "Cystobasidiomycetes", "Exobasidiomycetes", "Geminibasidiomycetes", "Malasseziomycetes", "Microbotryomycetes", "Tremellomycetes", "Ustilaginomycetes", "Wallemiomycetes", "Basidiomycota", "Calcarisporiellomycetes", "Chytridiomycetes", "GS13", "Lobulomycetes", "Rhizophydiomycetes", "Spizellomycetes", "Synchytriomycetes", "Chytridiomycota", "Archaeosporomycetes", "Glomeromycetes", "Glomeromycota", "Mortierellomycetes", "Mortierellomycota", "Mucoromycetes", "Umbelopsidomycetes", "Olpidiomycetes", "Rozellomycota", "Rozellomycotina_cls_Incertae_sedis", "Zoopagomycetes", "Fungi")

# remove unwanted taxa anotation in ps
psrm_A_ <- function(inputps)
{
    temp.taxdf <- as.data.frame(as(tax_table(inputps),"matrix"))
    temp.taxdf <- apply(temp.taxdf, 2, function(x) gsub("_A_.*","", x))
    temp.ps.taxclean <- phyloseq(otu_table(inputps),sample_data(inputps),tax_table(as.matrix(temp.taxdf)))
    temp.ps.taxclean
}
psrm_B_ <- function(inputps)
{
    temp.taxdf <- as.data.frame(as(tax_table(inputps),"matrix"))
    temp.taxdf <- apply(temp.taxdf, 2, function(x) gsub("_B_.*","", x))
    temp.ps.taxclean <- phyloseq(otu_table(inputps),sample_data(inputps),tax_table(as.matrix(temp.taxdf)))
    temp.ps.taxclean
}
psrm_F_ <- function(inputps)
{
    temp.taxdf <- as.data.frame(as(tax_table(inputps),"matrix"))
    temp.taxdf <- apply(temp.taxdf, 2, function(x) gsub("_F_.*","", x))
    temp.ps.taxclean <- phyloseq(otu_table(inputps),sample_data(inputps),tax_table(as.matrix(temp.taxdf)))
    temp.ps.taxclean
}
ps.allA.taxclean <- psrm_A_(ps.allA)
ps.allB.taxclean <- psrm_B_(ps.allB)
ps.allF.taxclean <- psrm_F_(ps.allF)

# determine top12 classes
ps.allA.site = merge_samples(ps.allA.taxclean, "Location", fun = mean)
ps.allA.site.cla <- tax_glom(ps.allA.site, "Class", NArm = FALSE, bad_empty = "NA")
ps.allB.site = merge_samples(ps.allB.taxclean, "Location", fun = mean)
ps.allB.site.cla <- tax_glom(ps.allB.site, "Class", NArm = FALSE, bad_empty = "NA")
ps.allF.site = merge_samples(ps.allF.taxclean, "Location", fun = mean)
ps.allF.site.cla <- tax_glom(ps.allF.site, "Class", NArm = FALSE, bad_empty = "NA")

pstopn <- function(inputps, topn)
	{tempps <- inputps
	topnls <- names(sort(taxa_sums(tempps),decreasing = TRUE))[1:topn]
	tempps <- prune_taxa(topnls,tempps)
	tempps
	}

ps2stack <- function (inputps, inputlevel, inputlevel.rad)
	{
	library(scales)
	library(reshape2)
	ps.df <- as.data.frame(as(otu_table(inputps), "matrix"))
	stack.no <- dim(ps.df)[2]
	colnames(ps.df) <- tax_table(inputps)[,"Class"]
	ps.df$Location <- rownames(ps.df)
	psm.df <- melt(ps.df, id.vars = c('Location'))
	stack.gg <- ggplot(psm.df,aes(x = factor(Location, levels=inputlevel.rad), y = value, fill = factor(variable, levels=inputlevel))) + 
		geom_bar(position = "fill",stat = "identity") + 
		scale_y_continuous(labels = percent_format()) +
		theme(axis.text.x = element_text(face="bold", size = 12, angle = 90, hjust = 1, vjust = 1))
	rm(ps.df, stack.no, psm.df)
	stack.gg
	}

ps.allA.site.cla.top12 <- pstopn(ps.allA.site.cla, 12)
ps.allB.site.cla.top12 <- pstopn(ps.allB.site.cla, 12)
ps.allF.site.cla.top12 <- pstopn(ps.allF.site.cla, 12)

sum(taxa_sums(ps.allA.site.cla.top12))/sum(taxa_sums(ps.allA.site.cla))
# [1] 1
sum(taxa_sums(ps.allB.site.cla.top12))/sum(taxa_sums(ps.allB.site.cla))
# [1] 0.7371542
sum(taxa_sums(ps.allF.site.cla.top12))/sum(taxa_sums(ps.allF.site.cla))
# [1] 0.9497013

library(RColorBrewer)
cols.all <- colorRampPalette(brewer.pal(12, "Paired"))
cols.all(30)[1:6]
cols.all(30)[7:18]
cols.all(30)[19:30]

ps.allA.site.cla.top12.RA <- transform_sample_counts(ps.allA.site.cla.top12, function(x){x / sum(x)})
ps2stack(ps.allA.site.cla.top12.RA, class.A, sitesHL) + scale_fill_manual(values=cols.all(30)[1:6]) + scale_x_discrete(drop = FALSE)

ps.allB.site.cla.top12.RA <- transform_sample_counts(ps.allB.site.cla.top12, function(x){x / sum(x)})
ps2stack(ps.allB.site.cla.top12.RA, class.B, sitesHL) + scale_fill_manual(values=cols.all(30)[7:18]) + scale_x_discrete(drop = FALSE)

ps.allF.site.cla.top12.RA <- transform_sample_counts(ps.allF.site.cla.top12, function(x){x / sum(x)})
ps2stack(ps.allF.site.cla.top12.RA, class.F, sitesHL) + scale_fill_manual(values=cols.all(30)[19:30]) + scale_x_discrete(drop = FALSE)

# RA of classes
100*colSums(otu_table(ps.allA.site.cla))/sum(otu_table(ps.allA.site.cla));tax_table(ps.allA.site.cla)
100*colSums(otu_table(ps.allB.site.cla))/sum(otu_table(ps.allB.site.cla));tax_table(ps.allB.site.cla)
100*colSums(otu_table(ps.allF.site.cla))/sum(otu_table(ps.allF.site.cla));tax_table(ps.allF.site.cla)

##########################################################################################
############################## richness level ############################################
##########################################################################################

ps2alphadiv <- function(inputps)
{
	tempdf <- as.data.frame(as(otu_table(inputps),"matrix"))
	tempdivdf <- as.data.frame(sample_data(inputps))
	tempdivdf$H <- vegan::diversity(tempdf)  
	tempdivdf$S <- vegan::specnumber(tempdf) 
	tempdivdf$J <- tempdivdf$H/log(tempdivdf$S)
	tempdivdf$alpha <- vegan::fisher.alpha(round(1000*tempdf))  
	tempdivdf$simp <- vegan::diversity(tempdf, "simpson")
	tempdivdf$invsimp <- vegan::diversity(tempdf, "inv")
	tempdivdf$unbias.simp <- vegan::rarefy(round(1000*tempdf), 2) - 1
	tempdivdf
}

alphadiv.allA <- ps2alphadiv(ps.allA)
alphadiv.allB <- ps2alphadiv(ps.allB)
alphadiv.allF <- ps2alphadiv(ps.allF)

ps2betadiv.Location <- function(inputps)
{
	tempdf <- as.data.frame(as(otu_table(inputps),"matrix"))
	tempsmdf <- as.data.frame(sample_data(inputps))
	tempalpha <- with(tempsmdf, tapply(specnumber(tempdf), Location, mean))
	tempgamma <- with(tempsmdf, specnumber(tempdf, Location))
	tempbetadf <- as.data.frame(tempalpha)
	tempbetadf <- cbind(tempbetadf, as.data.frame(tempgamma))
	tempbetadf$beta <- tempbetadf$tempgamma/tempbetadf$tempalpha - 1
	tempbetadf
}

betadiv.L.allA <- ps2betadiv.Location(ps.allA)
betadiv.L.allB <- ps2betadiv.Location(ps.allB)
betadiv.L.allF <- ps2betadiv.Location(ps.allF)

library(ggpubr)
ggarrange(
    ggplot(alphadiv.allA, aes(x=factor(Location, levels=sitesLH), y=H)) + 
        geom_boxplot(color=cols.all(30)[3], fill=cols.all(30)[2]) + 
        labs(title="",x="Sampling sites", y = "Shannon index") + 
        lims(x = factor(sitesLH, levels=sitesLH)) +
        coord_flip(),
    ggplot(alphadiv.allB, aes(x=factor(Location, levels=sitesLH), y=H)) + 
        geom_boxplot(color=cols.all(30)[13], fill=cols.all(30)[12]) + 
        labs(title="",x="Sampling sites", y = "Shannon index") + 
        lims(x = factor(sitesLH, levels=sitesLH)) +
        coord_flip(),
    ggplot(alphadiv.allF, aes(x=factor(Location, levels=sitesLH), y=H)) + 
        geom_boxplot(color=cols.all(30)[24], fill=cols.all(30)[23]) + 
        labs(title="",x="Sampling sites", y = "Shannon index") + 
        lims(x = factor(sitesLH, levels=sitesLH)) +
        coord_flip(),
    ncol = 3, nrow = 1)

# S: Species richness
ggarrange(
ggplot(alphadiv.allA, aes(x=factor(Location, levels=sitesLH), y=S)) + 
	geom_boxplot(color=cols.all(30)[3], fill=cols.all(30)[2]) + 
	labs(title="",x="Sampling sites", y = "Species richness") + 
	lims(x = factor(sitesLH, levels=sitesLH)) +
	coord_flip(),
ggplot(alphadiv.allB, aes(x=factor(Location, levels=sitesLH), y=S)) + 
	geom_boxplot(color=cols.all(30)[13], fill=cols.all(30)[12]) + 
	labs(title="",x="Sampling sites", y = "Species richness") + 
	lims(x = factor(sitesLH, levels=sitesLH)) +
	coord_flip(),
ggplot(alphadiv.allF, aes(x=factor(Location, levels=sitesLH), y=S)) + 
	geom_boxplot(color=cols.all(30)[24], fill=cols.all(30)[23]) + 
	labs(title="",x="Sampling sites", y = "Species richness") + 
	lims(x = factor(sitesLH, levels=sitesLH)) +
	coord_flip(),
	ncol = 3, nrow = 1)

# simp: Simpson's index
ggarrange(
ggplot(alphadiv.allA, aes(x=factor(Location, levels=sitesLH), y=simp)) + 
	geom_boxplot(color=cols.all(30)[3], fill=cols.all(30)[2]) + 
	labs(title="",x="Sampling sites", y = "Simpson's index") + 
	lims(x = factor(sitesLH, levels=sitesLH)) +
	coord_flip(),
ggplot(alphadiv.allB, aes(x=factor(Location, levels=sitesLH), y=simp)) + 
	geom_boxplot(color=cols.all(30)[13], fill=cols.all(30)[12]) + 
	labs(title="",x="Sampling sites", y = "Simpson's index") + 
	lims(x = factor(sitesLH, levels=sitesLH)) +
	coord_flip(),
ggplot(alphadiv.allF, aes(x=factor(Location, levels=sitesLH), y=simp)) + 
	geom_boxplot(color=cols.all(30)[24], fill=cols.all(30)[23]) + 
	labs(title="",x="Sampling sites", y = "Simpson's index") + 
	lims(x = factor(sitesLH, levels=sitesLH)) +
	coord_flip(),
	ncol = 3, nrow = 1)


##########################################################################################
############### correlation among environmental factors ##################################
##########################################################################################

env.unique <- comb.samdf[, !colnames(comb.samdf) %in% c("Location","Replicates","Samples","Latitude","Longitude", "SampID")]
env.unique <- env.unique[, !colnames(env.unique) %in% c("Mean.Temperature.of.Warmest.Quarter", "Mean.Temperature.of.Coldest.Quarter", "Precipitation.of.Wettest.Month", "Precipitation.of.Driest.Month", "Precipitation.of.Wettest.Quarter", "Precipitation.of.Driest.Quarter", "Precipitation.of.Warmest.Quarter", "Precipitation.of.Coldest.Quarter", "Max.Temperature.of.Warmest.Month", "Min.Temperature.of.Coldest.Month", "Temperature.Annual.Range", "Mean.Temperature.of.Wettest.Quarter", "Mean.Temperature.of.Driest.Quarter", "January", "February", "March", "April", "May", "August", "September", "October", "November", "December", "Range")]
env.unique <- env.unique[, !colnames(env.unique) %in% c("UV","Temp","Mean.Diurnal.Range","Isothermality","Elevation","Max","Min")]

env.unique <- env.unique[!duplicated(env.unique),]

env.pearson <- cor(env.unique)
round(env.pearson,2)

library(gclus)
env.o <- order.single(env.pearson)

library(MESS)
pairs(env.unique[,env.o], 
	lower.panel=panel.smooth, upper.panel=panel.cor, 
	diag.panel=panel.hist, main="Pearson correlation coefficient rho")

pdf("Pearson correlation coefficient rho.pdf", height = 600, width = 600)
par(mar = c(1, 1, 1, 1))
pairs(env.unique[,env.o], 
	lower.panel=panel.smooth, upper.panel=panel.cor, 
	diag.panel=panel.hist, main="Pearson correlation coefficient rho")
dev.off()

# Kendall's tau
env.ken <- cor(env.unique, method="kendall")
env.o <- order.single(env.ken)
pairs(env.unique[,env.o], 
	lower.panel=panel.smooth, upper.panel=panel.cor, 
	no.col=TRUE, method = "kendall",
	diag.panel=panel.hist, main="Kendall correlation coefficient tau")


##########################################################################################
############################## MRM #######################################################
##########################################################################################

ps2BCsim <- function(inputps)
	{
	tempdf <- ps2df(inputps)
	tempdfdist <- vegdist(tempdf, method = "bray")
	tempBCsim <- 1 - tempdfdist
	tempBCsim
	}

BCsim.allA <- ps2BCsim(ps.allA)
BCsim.allB <- ps2BCsim(ps.allB)
BCsim.allF <- ps2BCsim(ps.allF)

# 0 values in BCsim.allB resulted inf with ln transformation, thus mannually change 0s to 0.00000001
mod.BCsim.allB <- as.matrix(BCsim.allB)
mod.BCsim.allB[mod.BCsim.allB==0] <- 0.00000001
BCsim.allB <- as.dist(mod.BCsim.allB)

BCsim.ln.allA <- log(BCsim.allA, exp(1))
BCsim.ln.allB <- log(BCsim.allB, exp(1))
BCsim.ln.allF <- log(BCsim.allF, exp(1))

library(geosphere)
ps2sitedis <- function(inputps)
{
	library(geosphere)
	tempenv <- as.data.frame(as(sample_data(inputps),"matrix"))
	tempsitedis <- distm(apply(tempenv[,c("Longitude", "Latitude")], 2, as.numeric)) / 1000
	rownames(tempsitedis) <- rownames(tempenv)
	colnames(tempsitedis) <- rownames(tempenv)
	tempsitedis <- as.dist(tempsitedis)
	tempsitedis
}

ps2sitedis.ln <- function(inputps)
{
	library(geosphere)
	tempenv <- as.data.frame(as(sample_data(inputps),"matrix"))
	tempsitedis <- distm(apply(tempenv[,c("Longitude", "Latitude")], 2, as.numeric)) / 1000
	tempsitedis <- log(tempsitedis+1, exp(1))
	rownames(tempsitedis) <- rownames(tempenv)
	colnames(tempsitedis) <- rownames(tempenv)
	tempsitedis <- as.dist(tempsitedis)
	tempsitedis
}

sitedis.allA <- ps2sitedis(ps.allA)
sitedis.allB <- ps2sitedis(ps.allB)
sitedis.allF <- ps2sitedis(ps.allF)

sitedis.ln.allA <- ps2sitedis.ln(ps.allA)
sitedis.ln.allB <- ps2sitedis.ln(ps.allB)
sitedis.ln.allF <- ps2sitedis.ln(ps.allF)
 
envfactls <- colnames(env.unique)
envfactls <- envfactls[!(envfactls %in% c("SampID", "Annual.Mean.Temperature", "Temperature.Seasonality", "June", "July", "AnnualAverage"))]

ps2envdisls <- function(inputps, inputenvfactls)
{
	tempenv <- as.data.frame(as(sample_data(inputps),"matrix"))
	tempenvdisls <- list(NULL)
	for (i in 1:length(inputenvfactls))
	{
		tempenvdis <- vegdist(as.numeric(tempenv[,inputenvfactls[i]]), method = "euclidean")
		tempenvdisls[[i]] <- tempenvdis
	}
	names(tempenvdisls) <- inputenvfactls
	tempenvdisls
}

envdisls.allA <- ps2envdisls(ps.allA, envfactls)
envdisls.allB <- ps2envdisls(ps.allB, envfactls)
envdisls.allF <- ps2envdisls(ps.allF, envfactls)

# MuMIn stdize(), refer to：https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4961435/
library(MuMIn)
envdisls.stdize.allA <- lapply(envdisls.allA, stdize)
envdisls.stdize.allB <- lapply(envdisls.allB, stdize)
envdisls.stdize.allF <- lapply(envdisls.allF, stdize)

# MRM
library(ecodist)

MRMfit.allA <- MRM(BCsim.ln.allA~
sitedis.ln.allA + 
envdisls.stdize.allA[["Altitude"]] + 
envdisls.stdize.allA[["Moisture"]] + 
envdisls.stdize.allA[["TOM"]] + 
envdisls.stdize.allA[["TN"]] + 
envdisls.stdize.allA[["AN"]] + 
envdisls.stdize.allA[["AP"]] + 
envdisls.stdize.allA[["AK"]] + 
envdisls.stdize.allA[["SSalt"]] + 
envdisls.stdize.allA[["pH"]] + 
envdisls.stdize.allA[["Annual.Precipitation"]] + 
envdisls.stdize.allA[["Precipitation.Seasonality"]], nperm = 10000, method = "linear")

MRMfit.allB <- MRM(BCsim.ln.allB~
sitedis.ln.allB + 
envdisls.stdize.allB[["Altitude"]] + 
envdisls.stdize.allB[["Moisture"]] + 
envdisls.stdize.allB[["TOM"]] + 
envdisls.stdize.allB[["TN"]] + 
envdisls.stdize.allB[["AN"]] + 
envdisls.stdize.allB[["AP"]] + 
envdisls.stdize.allB[["AK"]] + 
envdisls.stdize.allB[["SSalt"]] + 
envdisls.stdize.allB[["pH"]] + 
envdisls.stdize.allB[["Annual.Precipitation"]] + 
envdisls.stdize.allB[["Precipitation.Seasonality"]], nperm = 10000, method = "linear")

MRMfit.allF <- MRM(BCsim.ln.allF~
sitedis.ln.allF + 
envdisls.stdize.allF[["Altitude"]] + 
envdisls.stdize.allF[["Moisture"]] + 
envdisls.stdize.allF[["TOM"]] + 
envdisls.stdize.allF[["TN"]] + 
envdisls.stdize.allF[["AN"]] + 
envdisls.stdize.allF[["AP"]] + 
envdisls.stdize.allF[["AK"]] + 
envdisls.stdize.allF[["SSalt"]] + 
envdisls.stdize.allF[["pH"]] + 
envdisls.stdize.allF[["Annual.Precipitation"]] + 
envdisls.stdize.allF[["Precipitation.Seasonality"]], nperm = 10000, method = "linear")

MRMfit.allA
MRMfit.allB
MRMfit.allF


